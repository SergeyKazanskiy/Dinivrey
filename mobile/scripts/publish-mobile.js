// Utility to run commands


import { execSync } from "child_process";
import fs from "fs";
import readline from "readline";

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// Utility to run commands
function run(cmd) {
  execSync(cmd, { stdio: "inherit" });
}

// Utility to ask user a question
function ask(question) {
  return new Promise((resolve) => rl.question(question, resolve));
}

(async () => {
  console.log("üöÄ Expo + GitHub Pages publisher started...\n");

  // 1Ô∏è‚É£ Ensure gh-pages is installed
  try {
    require.resolve("gh-pages");
  } catch {
    console.log("üì¶ Installing gh-pages...");
    run("npm install gh-pages --save-dev");
  }

  // 2Ô∏è‚É£ Read and optionally update .env.production
  const envPath = ".env.production";
  let envData = fs.existsSync(envPath)
    ? fs.readFileSync(envPath, "utf8")
    : "";

  const apiUrlMatch = envData.match(/^EXPO_PUBLIC_API_BASE_URL=(.*)$/m);
  const imagesUrlMatch = envData.match(/^EXPO_PUBLIC_IMAGES_URL=(.*)$/m);

  const currentApiUrl = apiUrlMatch ? apiUrlMatch[1] : "";
  const currentImagesUrl = imagesUrlMatch ? imagesUrlMatch[1] : "";

  console.log("\nüåê –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:");
  console.log(`EXPO_PUBLIC_API_BASE_URL = ${currentApiUrl || "(–Ω–µ –∑–∞–¥–∞–Ω)"}`);
  console.log(`EXPO_PUBLIC_IMAGES_URL = ${currentImagesUrl || "(–Ω–µ –∑–∞–¥–∞–Ω)"}`);

  const newApiUrl = await ask(
    "\nüëâ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π API URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://ip172-...play-with-docker.com:8080) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ: "
  );

  const newImagesUrl = await ask(
    "üëâ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ: "
  );

  const finalApiUrl = newApiUrl.trim() || currentApiUrl;
  const finalImagesUrl = newImagesUrl.trim() || currentImagesUrl;

  let updatedEnv = envData
    .replace(/^EXPO_PUBLIC_API_BASE_URL=.*$/m, `EXPO_PUBLIC_API_BASE_URL=${finalApiUrl}`)
    .replace(/^EXPO_PUBLIC_IMAGES_URL=.*$/m, `EXPO_PUBLIC_IMAGES_URL=${finalImagesUrl}`);

  if (!/^EXPO_PUBLIC_API_BASE_URL=/m.test(updatedEnv))
    updatedEnv += `\nEXPO_PUBLIC_API_BASE_URL=${finalApiUrl}`;
  if (!/^EXPO_PUBLIC_IMAGES_URL=/m.test(updatedEnv))
    updatedEnv += `\nEXPO_PUBLIC_IMAGES_URL=${finalImagesUrl}`;

  fs.writeFileSync(envPath, updatedEnv.trim() + "\n");
  console.log("\n‚úÖ –§–∞–π–ª .env.production –æ–±–Ω–æ–≤–ª—ë–Ω.");

  rl.close();

  // 3Ô∏è‚É£ Export static site
  console.log("\nüì¶ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Expo –ø—Ä–æ–µ–∫—Ç –≤ dist...");
  run("npx expo export --output-dir dist");

  // 4Ô∏è‚É£ Deploy to GitHub Pages
  console.log("\nüöÄ –ü—É–±–ª–∏–∫—É–µ–º –Ω–∞ GitHub Pages...");
  run("npx gh-pages -d dist");

  console.log("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ GitHub Pages üéâ");
})();
